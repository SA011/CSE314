diff --git a/Makefile b/Makefile
index 39a99d7..05020ba 100644
--- a/Makefile
+++ b/Makefile
@@ -128,6 +128,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_userCowTest\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..cced7ca 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            increase_count(uint64);
+void            decrease_count(uint64);
+void            init_count(uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -147,6 +150,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             cow_page_fault(pagetable_t, uint64);
 
 // uart.c
 void            uartinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..594407e 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,6 +23,8 @@ struct {
   struct run *freelist;
 } kmem;
 
+
+int reference_count[MAXFRAME];
 void
 kinit()
 {
@@ -35,8 +37,12 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    acquire(&kmem.lock);
+    init_count((uint64)p);
+    release(&kmem.lock);
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -51,14 +57,20 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
 
   r = (struct run*)pa;
-
+ int frameIndex = FRAMEINDEX((uint64)pa);
+  
   acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
+  if(--reference_count[frameIndex] <= 0){
+    // Fill with junk to catch dangling refs.
+    memset(pa, 1, PGSIZE);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    if(frameIndex < 0 ||frameIndex >= MAXFRAME)panic("JHAMELA");
+    if(reference_count[frameIndex] < 0)panic("NEGATIVE");
+    reference_count[frameIndex] = 0;
+  }
   release(&kmem.lock);
 }
 
@@ -73,10 +85,44 @@ kalloc(void)
   acquire(&kmem.lock);
   r = kmem.freelist;
   if(r)
-    kmem.freelist = r->next;
+    kmem.freelist = r->next, init_count((uint64)r);
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
+  
   return (void*)r;
 }
+
+void
+increase_count(uint64 pa){
+  if(pa % PGSIZE != 0 || pa < KERNBASE || pa >= PHYSTOP)
+    panic("koi access korish");
+  int frameIndex = FRAMEINDEX((uint64)pa);
+  
+  acquire(&kmem.lock);
+  if(frameIndex < 0 || frameIndex > MAXFRAME)panic("out of range");
+  ++reference_count[frameIndex];  
+  release(&kmem.lock);
+}
+
+
+void
+decrease_count(uint64 pa){
+  // int frameIndex = FRAMEINDEX((uint64)pa);
+  
+  // acquire(&kmem.lock);
+  // int t = --reference_count[frameIndex];  
+  // release(&kmem.lock);
+  kfree((void*)pa);
+}
+
+
+void
+init_count(uint64 pa){
+  int frameIndex = FRAMEINDEX((uint64)pa);
+  
+  // acquire(&kmem.lock);
+  reference_count[frameIndex] = 1;  
+  // release(&kmem.lock);
+}
\ No newline at end of file
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..5243c0e 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -47,6 +47,9 @@
 #define KERNBASE 0x80000000L
 #define PHYSTOP (KERNBASE + 128*1024*1024)
 
+#define MAXFRAME ((PHYSTOP - KERNBASE) >> PGSHIFT)
+#define FRAMEINDEX(pa)  ((pa - KERNBASE) >> PGSHIFT)
+
 // map the trampoline page to the highest address,
 // in both user and kernel space.
 #define TRAMPOLINE (MAXVA - PGSIZE)
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..97dcb39 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_C (1L << 8) //COW
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..7687ca4 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,51 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+int
+cow_page_fault(pagetable_t pagetable, uint64 va){
+  if(va >= MAXVA)return 1;
+  //struct proc *p = myproc();
+  pte_t *pte;
+  if((pte = walk(pagetable, va, 0)) == 0)
+    panic("usertrap: pte should exist");
+  if((*pte & PTE_V) == 0)
+    panic("usertrap: page not present");
+  if((*pte & PTE_U) == 0)
+    panic("usertrap: user can not access");
+  uint64 pa = PTE2PA(*pte);
+  uint flags = PTE_FLAGS(*pte);
+
+  // uint64 x = pa;
+  // char s[100];
+  //   int u = 99;
+  //   s[u] = '\0';
+  //   while(x){
+  //     s[--u] = (char)(x % 10 + '0');
+  //     x /= 10;
+  //   }
+
+    // printf("PANIC %s\n", s + u);
+  if((flags & PTE_C)){
+    flags &= ~PTE_C;
+    flags |= PTE_W;
+    char *mem;
+    if((mem = kalloc()) == 0)
+      return 1;
+    memmove(mem, (char*)pa, PGSIZE);
+    uvmunmap(pagetable, va, 1, 0);
+    if(mappages(pagetable, va, PGSIZE, (uint64)mem, flags) != 0){
+      kfree(mem);
+      // printf("KENO\n");
+      return 1;
+    }
+    decrease_count(pa);
+
+  }else{
+      //printf("COW OFF\n");
+    return 1;
+  }
+  return 0;
+}
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -49,7 +94,7 @@ usertrap(void)
   
   // save user program counter.
   p->trapframe->epc = r_sepc();
-  
+
   if(r_scause() == 8){
     // system call
 
@@ -67,7 +112,22 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if(r_scause() == 15) {
+    
+    //page fault
+    // printf("Here\n");
+    // printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    // printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+    // setkilled(p);
+
+
+    uint64 va = PGROUNDDOWN(r_stval());
+    if(cow_page_fault(p -> pagetable, va)){
+      //printf("ORIGINAL PAGE FAULT");
+      setkilled(p);
+    }
+
+  }else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
@@ -138,7 +198,12 @@ kerneltrap()
   uint64 sepc = r_sepc();
   uint64 sstatus = r_sstatus();
   uint64 scause = r_scause();
-  
+  // printf("%p", scause);
+  // if(scause == 13){
+  //   // panic("ASHSE");
+  //   uint64 va = PGROUNDDOWN(r_stval());
+  //   if(!cow_page_fault(myproc() -> pagetable, va))return;
+  // }
   if((sstatus & SSTATUS_SPP) == 0)
     panic("kerneltrap: not from supervisor mode");
   if(intr_get() != 0)
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..cce1785 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -316,14 +316,38 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+    if(((*pte) & PTE_W)){
+      // printf("COW ON KORSI\n");
+      // uint64 x = pa;
+      // char s[100];
+      // int u = 99;
+      // s[u] = '\0';
+      // while(x){
+      //   s[--u] = (char)(x % 10 + '0');
+      //   x /= 10;
+      // }
+
+      // printf("%s\n", s + u);
+      *pte |= PTE_C;
+      *pte &= ~PTE_W;
+    }
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(mem);
+      // printf("JS\n");
       goto err;
     }
+    increase_count(pa);
+    // uvmunmap(old, i, 1, 0);
+    // if(mappages(old, i, PGSIZE, (uint64)pa, flags) != 0){
+    //   // kfree(mem);
+    //   // printf("JS\n");
+    //   goto err;
+    // }
   }
   return 0;
 
@@ -355,7 +379,17 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(va0 >= MAXVA)
+      return -1;
+    pte_t *pte = walk(pagetable, va0, 0);
+    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
+      return -1;
+    if((*pte & PTE_C)){
+      if(cow_page_fault(pagetable, va0))
+        return -1;
+    }
     pa0 = walkaddr(pagetable, va0);
+    
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
@@ -380,7 +414,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
+    pa0 = walkaddr(pagetable, va0); 
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
diff --git a/user/userCowTest.c b/user/userCowTest.c
new file mode 100644
index 0000000..170a837
--- /dev/null
+++ b/user/userCowTest.c
@@ -0,0 +1,188 @@
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+void allocate_deallocate_test(){
+  uint64 large = 100 * 1024 * 1024;
+  uint64 alloc = (uint64)sbrk(large);
+  if(alloc == (uint64)(-1)){
+    printf("ALLOCATE KORTE PARE NAI\n");
+    exit(1);
+  }
+  
+  int f = fork();
+  if(f < 0){
+    printf("FORK KORTE PARE NAI\n");
+    exit(1);
+  }
+  if(f == 0){
+    int kisu_edit = 100, i = 0;
+    for(char *p = (char *)alloc; i < kisu_edit; i++, p += 4){
+      *(int*)p = getpid();
+    }
+    exit(0);
+  }else{
+    int kisu_edit = 100, i = 0;
+    for(char *p = (char *)alloc + kisu_edit * 8; i < kisu_edit; i++, p += 4){
+      *(int*)p = getpid();
+    }
+    
+  }
+  if(f == 0){
+    if((uint64)sbrk(-large) == (uint64)(-1)){
+      printf("DEALLOCATE KORTE PARE NAI\n");
+      exit(1);
+    }
+    exit(0);
+  }
+
+  wait(0);
+  if((uint64)sbrk(-large) == (uint64)(-1)){
+    printf("DEALLOCATE KORTE PARE NAI\n");
+    exit(1);
+  }
+
+  printf("ALLOC DEALLOC PASSED\n");
+}
+
+
+void writeAndRead(){
+  uint64 large = 100 * 1024 * 1024;
+  uint64 alloc = (uint64)sbrk(large);
+  if(alloc == (uint64)(-1)){
+    printf("ALLOCATE KORTE PARE NAI\n");
+    exit(1);
+  }
+  
+  int f = fork();
+  if(f < 0){
+    printf("FORK KORTE PARE NAI\n");
+    exit(1);
+  }
+  int kisu_edit = 1000, i = 0, f2;
+  if(f == 0){
+    for(char *p = (char *)alloc; i < kisu_edit; i++, p += 4){
+      *(int*)p = getpid();
+    }
+  }else{
+    int pp = getpid();
+    for(char *p = (char *)alloc; i < kisu_edit; i++, p += 4){
+      *(int*)p = pp;
+    }
+
+
+    f2 = fork();
+    if(f2 < 0){
+      printf("FORK KORTE PARE NAI\n");
+      exit(1);
+    }
+    i = 0;
+    if(f2 == 0){
+      for(char *p = (char *)alloc; i < kisu_edit; i++, p += 4){
+        if(*(int*)p != pp){
+          printf("Vul read\n");
+          exit(1);
+        }
+        *(int*)p = getpid();
+      }
+    }
+
+
+  }
+  for(char *p = (char *)alloc; i < kisu_edit; i++, p += 4){
+    if(*(int*)p != getpid()){
+      printf("Vul read\n");
+      exit(1);
+    }
+  }
+  if(f == 0){
+    if((uint64)sbrk(-large) == (uint64)(-1)){
+      printf("DEALLOCATE KORTE PARE NAI\n");
+      exit(1);
+    }
+    exit(0);
+  }
+  if(f2 == 0){
+    if((uint64)sbrk(-large) == (uint64)(-1)){
+    printf("DEALLOCATE KORTE PARE NAI\n");
+    exit(1);
+  }
+    exit(0);
+  }
+
+  wait(0);
+  if((uint64)sbrk(-large) == (uint64)(-1)){
+    printf("DEALLOCATE KORTE PARE NAI\n");
+    exit(1);
+  }
+
+  printf("READ WRITE PASSED\n");
+}
+
+int files[2];
+char ara[4096];
+char testName[100] = "XV6_OFFLINE5_COW_TEST";
+char duplicate[100] = "ANOTHER_READ";
+char temp[100];
+void kerneltrapCheck(){
+
+  for(int i = 0; i < 5; i++){
+    if(pipe(files) != 0){
+      printf("PIPE KORTE PARE NAI\n");
+      exit(1);
+    }
+
+    int f;
+    if((f = fork()) < 0){
+      printf("FORK KORTE PARE NAI\n");
+      exit(1);
+    }
+
+    if(f == 0){
+      //child write korbe and exit korbe
+      if(write(files[1], testName, sizeof(testName)) != sizeof(testName)){
+        printf("WRITE KORTE PARE NAI\n");
+        exit(1);
+      }
+      exit(0);
+    }
+
+    if(read(files[0], ara, sizeof(testName)) != sizeof(testName)){
+      printf("READ KORTE PARE NAI\n");
+      exit(1);
+    }
+
+    if(memcmp(ara, testName, sizeof(testName)) != 0){
+        printf("MILE NAI\n");
+        exit(1);
+    }
+    printf("On %d:\ntestName: %s\nara: %s\n", i, testName, ara);
+    memmove(temp, duplicate, sizeof(duplicate));
+    memmove(duplicate, testName, sizeof(testName));
+    memmove(testName, temp, sizeof(temp));
+    // printf("%s\n", duplicate);
+  }
+}
+
+
+int
+main(int argc, char *argv[])
+{
+
+  allocate_deallocate_test();
+  allocate_deallocate_test();
+  allocate_deallocate_test();
+  allocate_deallocate_test();
+
+  writeAndRead();
+  writeAndRead();
+  writeAndRead();
+  writeAndRead();
+  writeAndRead();
+
+  kerneltrapCheck();
+
+  printf("ALL COW TESTS PASSED\n");
+
+  exit(0);
+}
\ No newline at end of file
